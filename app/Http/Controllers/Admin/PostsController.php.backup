<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Post;
use App\Models\Category;
use App\Models\Tag;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Str;
use Inertia\Inertia;
use Inertia\Response;

class PostsController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(): Response
    {
        $posts = Post::with(['user', 'category', 'tags'])
            ->orderBy('created_at', 'desc')
            ->paginate(10);
        
        $categories = Category::orderBy('name')->get();
        $tags = Tag::orderBy('name')->get();

        return Inertia::render('Admin/PostsManage', [
            'posts' => $posts,
            'categories' => $categories,
            'tags' => $tags,
            'title' => 'Manage Posts'
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): Response
    {
        $categories = Category::orderBy('name')->get();
        $tags = Tag::orderBy('name')->get();

        return Inertia::render('Admin/PostsCreate', [
            'categories' => $categories,
            'tags' => $tags,
            'title' => 'Create New Post'
        ]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'slug' => 'nullable|string|max:255|unique:posts,slug',
            'content' => 'required|string',
            'excerpt' => 'nullable|string|max:500',
            'status' => 'required|in:draft,published,private',
            'category_id' => 'nullable|exists:categories,id',
            'tags' => 'nullable|array',
            'tags.*' => 'exists:tags,id',
            'meta_title' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
            'featured_image' => 'nullable|string|max:255',
        ]);

        // Generate slug if not provided
        if (empty($validated['slug'])) {
            $validated['slug'] = Str::slug($validated['title']);
            
            // Ensure uniqueness
            $originalSlug = $validated['slug'];
            $counter = 1;
            while (Post::where('slug', $validated['slug'])->exists()) {
                $validated['slug'] = $originalSlug . '-' . $counter;
                $counter++;
            }
        }

        $validated['user_id'] = auth()->id();
        
        // Extract tags for separate handling
        $tags = $validated['tags'] ?? [];
        unset($validated['tags']);

        $post = Post::create($validated);
        
        // Attach tags
        if (!empty($tags)) {
            $post->tags()->attach($tags);
        }

        return redirect()->route('admin.posts.manage.index')
            ->with('success', 'Post created successfully!');
    }

    /**
     * Display the specified resource.
     */
    public function show(Post $postsManage): Response
    {
        $postsManage->load(['user', 'category', 'tags']);
        
        return Inertia::render('Admin/PostsShow', [
            'post' => $postsManage,
            'title' => 'View Post: ' . $postsManage->title
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Post $postsManage): Response
    {
        $postsManage->load(['category', 'tags']);
        $categories = Category::orderBy('name')->get();
        $tags = Tag::orderBy('name')->get();

        return Inertia::render('Admin/PostsEdit', [
            'post' => $postsManage,
            'categories' => $categories,
            'tags' => $tags,
            'title' => 'Edit Post: ' . $postsManage->title
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Post $postsManage): RedirectResponse
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255',
            'slug' => 'nullable|string|max:255|unique:posts,slug,' . $postsManage->id,
            'content' => 'required|string',
            'excerpt' => 'nullable|string|max:500',
            'status' => 'required|in:draft,published,private',
            'category_id' => 'nullable|exists:categories,id',
            'tags' => 'nullable|array',
            'tags.*' => 'exists:tags,id',
            'meta_title' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:255',
            'featured_image' => 'nullable|string|max:255',
        ]);

        // Generate slug if not provided
        if (empty($validated['slug'])) {
            $validated['slug'] = Str::slug($validated['title']);
            
            // Ensure uniqueness (excluding current post)
            $originalSlug = $validated['slug'];
            $counter = 1;
            while (Post::where('slug', $validated['slug'])->where('id', '!=', $postsManage->id)->exists()) {
                $validated['slug'] = $originalSlug . '-' . $counter;
                $counter++;
            }
        }

        // Extract tags for separate handling
        $tags = $validated['tags'] ?? [];
        unset($validated['tags']);

        $postsManage->update($validated);
        
        // Sync tags
        $postsManage->tags()->sync($tags);

        return redirect()->route('admin.posts.manage.index')
            ->with('success', 'Post updated successfully!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Post $postsManage): RedirectResponse
    {
        // Detach all tags
        $postsManage->tags()->detach();
        
        // Delete the post
        $postsManage->delete();

        return redirect()->route('admin.posts.manage.index')
            ->with('success', 'Post deleted successfully!');
    }
}
